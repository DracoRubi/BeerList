//
//  BeerListViewController.swift
//  BeerList
//
//  Created by Roberto Herranz on 21/9/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class BeerListViewController: UIViewController {
    
    // MARK: - IBOutlets -

    @IBOutlet weak var tableView: UITableView!

    // MARK: - Public properties -

    var presenter: BeerListPresenterInterface!
    
    // MARK: - Private properties -

    private var completeBeerList: [BeerEntity] = []
    private var searchController: UISearchController!
    private var activityIndicator: UIActivityIndicatorView!
    private var oldSearch = ""
    
    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()

        initializeTableView()
        initializeActivityIndicator()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        activityIndicator.startAnimating()
        presenter.onViewDidAppear()
    }

    // MARK: - Private methods -

    private func initializeTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(BeerCell.self, forCellReuseIdentifier: BeerCell.identifier)

        searchController = UISearchController()
        searchController.searchResultsUpdater = self
        tableView.tableHeaderView = searchController.searchBar
    }

    private func initializeActivityIndicator() {
        activityIndicator = UIActivityIndicatorView()
        activityIndicator = UIActivityIndicatorView(frame: CGRect(x: 0, y: 0, width: 40, height: 40))
        activityIndicator.color = .black
        activityIndicator.style = .large
        activityIndicator.center = view.center
        activityIndicator.hidesWhenStopped = true
        view.addSubview(activityIndicator)
    }

}

// MARK: - Extensions -

extension BeerListViewController: BeerListViewInterface {
    
    func initializeBeerData(withData data: [BeerEntity]) {
        completeBeerList = data
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.activityIndicator.stopAnimating()
        }
    }

    func appendBeerData(withData data: [BeerEntity]) {
        completeBeerList.append(contentsOf: data)
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.activityIndicator.stopAnimating()
        }
    }

    func animateActivityIndicator() {
        activityIndicator.startAnimating()
    }

}

extension BeerListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter.rowSelectedWithData(data: completeBeerList[indexPath.row])
        tableView.deselectRow(at: indexPath, animated: true)
    }

    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let scrollViewContentHeight = tableView.contentSize.height
        let scrollingOffset = scrollViewContentHeight - tableView.bounds.size.height
        let scrolledPastOffset = scrollView.contentOffset.y > scrollingOffset && tableView.isDragging
        if scrolledPastOffset {
            presenter.onTableViewNearingEnd()
        }
    }
}

extension BeerListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return completeBeerList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: BeerCell.identifier) {
            cell.textLabel?.text = completeBeerList[indexPath.row].name
            cell.accessoryType = .disclosureIndicator
            return cell
        } else {
            print("Error reusing cell!")
            return UITableViewCell()
        }
    }
}

extension BeerListViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        let searchText = searchController.searchBar.text ?? ""
        if oldSearch != searchText {
            oldSearch = searchText
            activityIndicator.startAnimating()
            presenter.onSearchTextUpdated(text: searchText)
        }
    }
}
